import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

/*
 * Available context bindings:
 *   SELECTION   Iterable<DasObject>
 *   PROJECT     project
 *   FILES       files helper
 */

packageName = "cn.edu.xmu.oomall.freight.mapper.po;"
typeMapping = [
    (~/(?i)bigint|mediumint/)             : "Long",
    (~/(?i)tinyint/)                      : "Byte",
    (~/(?i)int/)                          : "Integer",
    (~/(?i)float|double|decimal|real/)    : "Double",
    (~/(?i)datetime|timestamp/)           : "LocalDateTime",
    (~/(?i)date/)                         : "LocalDateTime",
    (~/(?i)time/)                         : "LocalDateTime",
    (~/(?i)/)                             : "String"
]

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
  SELECTION.filter { it instanceof DasTable }.each { generate(it, dir) }
}

def generate(table, dir) {
  def tableName = table.getName()
  def className = javaName(tableName, true).substring(7)
  className += "Po"
  def fields = calcFields(table)
  new File(dir, className + ".java").withPrintWriter { out -> generate(tableName, out, className, fields) }
}

def generate(tableName, out, className, fields) {
  out.println "package $packageName"
  out.println ""
  out.println "import lombok.Data;"
  out.println "import lombok.AllArgsConstructor;"
  out.println "import lombok.NoArgsConstructor;"
  out.println ""
  out.println "import java.time.LocalDateTime;"
  out.println "import javax.persistence.*;"
  out.println ""
  out.println "@Entity"
  out.println "@Table(name = \"$tableName\")"
  out.println "@Data"
  out.println "@NoArgsConstructor"
  out.println "@AllArgsConstructor"
  out.println "public class $className {"
  out.println "\t@Id"
  out.println "\t@GeneratedValue(strategy = GenerationType.IDENTITY)"
  fields.each() {
    if (it.annos != "") out.println "\t${it.annos}"
    out.println "\tprivate ${it.type} ${it.name};"
  }
//  out.println ""
//  fields.each() {
//    out.println ""
//    out.println "  public ${it.type} get${it.name.capitalize()}() {"
//    out.println "    return ${it.name};"
//    out.println "  }"
//    out.println ""
//    out.println "  public void set${it.name.capitalize()}(${it.type} ${it.name}) {"
//    out.println "    this.${it.name} = ${it.name};"
//    out.println "  }"
//    out.println ""
//  }
  out.println "}"
}

def calcFields(table) {
  DasUtil.getColumns(table).reduce([]) { fields, col ->
    def spec = Case.LOWER.apply(col.getDataType().getSpecification())
    def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
    fields += [[
                 name : javaName(col.getName(), false),
                 type : typeStr,
                 annos: ""]]
  }
}

def javaName(str, capitalize) {
  def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
    .collect { Case.LOWER.apply(it).capitalize() }
    .join("")
    .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, "_")
  capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]
}
